//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/NathansArt/StartMenuControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @StartMenuControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @StartMenuControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""StartMenuControls"",
    ""maps"": [
        {
            ""name"": ""MenuCtrl"",
            ""id"": ""ac4b37e3-acab-4b7b-9967-73c2cdee39ba"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7a6435c8-0532-450a-a358-bca136e57be1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""de64649a-7c53-4735-abe7-74af6b4430c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Move"",
                    ""id"": ""1abe9fc7-04bb-4f37-93e3-2ae6f69ee9de"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0ae74ae9-f23b-44bb-aa00-045bdc459b9f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e7183596-f592-4fce-8713-984d41f9aaed"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ed6db953-4c2e-4bdc-b480-fdda26d92b25"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cb7363fc-c3ac-4921-891c-164148970e9e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""127e4f31-2a85-4bcf-9984-857bc55e946b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MenuCtrl
        m_MenuCtrl = asset.FindActionMap("MenuCtrl", throwIfNotFound: true);
        m_MenuCtrl_Move = m_MenuCtrl.FindAction("Move", throwIfNotFound: true);
        m_MenuCtrl_Enter = m_MenuCtrl.FindAction("Enter", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MenuCtrl
    private readonly InputActionMap m_MenuCtrl;
    private List<IMenuCtrlActions> m_MenuCtrlActionsCallbackInterfaces = new List<IMenuCtrlActions>();
    private readonly InputAction m_MenuCtrl_Move;
    private readonly InputAction m_MenuCtrl_Enter;
    public struct MenuCtrlActions
    {
        private @StartMenuControls m_Wrapper;
        public MenuCtrlActions(@StartMenuControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MenuCtrl_Move;
        public InputAction @Enter => m_Wrapper.m_MenuCtrl_Enter;
        public InputActionMap Get() { return m_Wrapper.m_MenuCtrl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuCtrlActions set) { return set.Get(); }
        public void AddCallbacks(IMenuCtrlActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuCtrlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuCtrlActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Enter.started += instance.OnEnter;
            @Enter.performed += instance.OnEnter;
            @Enter.canceled += instance.OnEnter;
        }

        private void UnregisterCallbacks(IMenuCtrlActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Enter.started -= instance.OnEnter;
            @Enter.performed -= instance.OnEnter;
            @Enter.canceled -= instance.OnEnter;
        }

        public void RemoveCallbacks(IMenuCtrlActions instance)
        {
            if (m_Wrapper.m_MenuCtrlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuCtrlActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuCtrlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuCtrlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuCtrlActions @MenuCtrl => new MenuCtrlActions(this);
    public interface IMenuCtrlActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnEnter(InputAction.CallbackContext context);
    }
}
